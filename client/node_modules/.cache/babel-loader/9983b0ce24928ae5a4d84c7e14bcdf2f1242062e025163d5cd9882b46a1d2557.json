{"ast":null,"code":"var _jsxFileName = \"/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directlyS\n  return (\n\n    <div className=\"\">\n       \n      \n\n      {touristPlaces.map((place, index) => (\n\n       \n        <div key={index}>\n          \n       \n          {place.name} - Rating: {place.rating}\n         \n        </div>\n\n      ))}\n     \n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n\n- ---- - - - - - ---- -- - -- - - - - -- - -  - - ----------------------------------------\n*/\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        setAccommodations(accommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n*/\n\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n       \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n*/\n\n/*\n\n// exact location of accomidation\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          location: {\n            lon: accommodation.geometry.coordinates[0],\n            lat: accommodation.geometry.coordinates[1],\n          },\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating} - Location: {accommodation.location.lat}, {accommodation.location.lon}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\n/*\n // Accomidation details\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\n/*\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Traveldetails() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Accomidation code:  \n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n\n  return (\n    <>\n\n      <div className=\"travelout\">\n        <div className=\"row vits\">\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header \" ><h6>Places to Visit</h6></div>\n              <div className=\"card-body\">\n\n                {touristPlaces.map((place, index) => (\n\n\n                  <div key={index}>\n\n\n                    {place.name} \n\n                  </div>\n\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                {accommodations.map((accommodation, index) => (\n                  <div key={index}>\n                    {accommodation.name} - Rating: {accommodation.rating}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"18rem\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Dark card title</h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"18rem\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Dark card title</h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n}\nexport default Traveldetails;\n*/\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Traveldetails() {\n  _s();\n  const [userCity, setUserCity] = useState(\"hyderabad\");\n  const [touristPlaces, setTouristPlaces] = useState([]);\n  const [accommodations, setAccommodations] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cityCoords = await getCityCoordinates(userCity);\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000;\n\n        // Fetch places to visit\n        const placesUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const placesResponse = await axios.get(placesUrl);\n        const places = placesResponse.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0\n        }));\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n        setTouristPlaces(sortedPlaces);\n\n        // Fetch accommodations\n        const accommodationsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n        const accommodationsResponse = await axios.get(accommodationsUrl);\n        const accommodations = accommodationsResponse.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0\n        }));\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n        setAccommodations(sortedAccommodations);\n\n        // Fetch restaurants\n        const restaurantsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=restaurants&apikey=${apiKey}`;\n        const restaurantsResponse = await axios.get(restaurantsUrl);\n        const restaurants = restaurantsResponse.data.features.map(restaurant => ({\n          name: restaurant.properties.name\n          // Extract other relevant information as needed\n        }));\n        setRestaurants(restaurants);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n    fetchData();\n  }, [userCity]);\n  const getCityCoordinates = async city => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"travelout\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row vits\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"25rem\",\n              overflow: \"scroll\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: \"Places to Visit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 44\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: touristPlaces.map((place, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [place.name, \" - Rating: \", place.rating]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 676,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"25rem\",\n              overflow: \"scroll\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: \"Accommodation Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: accommodations.map((accommodation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [accommodation.name, \" - Rating: \", accommodation.rating]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"25rem\",\n              overflow: \"scroll\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: \"Restaurants\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 701,\n                columnNumber: 44\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 701,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: restaurants.map((restaurant, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: restaurant.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 704,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 702,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Traveldetails, \"vw89PpYo/kqveNhUQhxO7o/9MSM=\");\n_c = Traveldetails;\nexport default Traveldetails;\nvar _c;\n$RefreshReg$(_c, \"Traveldetails\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Traveldetails","_s","userCity","setUserCity","touristPlaces","setTouristPlaces","accommodations","setAccommodations","restaurants","setRestaurants","fetchData","cityCoords","getCityCoordinates","apiKey","radius","placesUrl","lon","lat","placesResponse","get","places","data","features","map","place","name","properties","rating","rate","sortedPlaces","sort","a","b","slice","accommodationsUrl","accommodationsResponse","accommodation","sortedAccommodations","restaurantsUrl","restaurantsResponse","restaurant","error","console","city","citySearchUrl","response","cityData","status","Error","children","className","style","maxWidth","maxHeight","overflow","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx"],"sourcesContent":["/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directlyS\n  return (\n\n    <div className=\"\">\n       \n      \n\n      {touristPlaces.map((place, index) => (\n\n       \n        <div key={index}>\n          \n       \n          {place.name} - Rating: {place.rating}\n         \n        </div>\n\n      ))}\n     \n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n\n- ---- - - - - - ---- -- - -- - - - - -- - -  - - ----------------------------------------\n*/\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        setAccommodations(accommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n*/\n\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n       \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n*/\n\n/*\n\n// exact location of accomidation\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          location: {\n            lon: accommodation.geometry.coordinates[0],\n            lat: accommodation.geometry.coordinates[1],\n          },\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating} - Location: {accommodation.location.lat}, {accommodation.location.lon}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\n\n/*\n // Accomidation details\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\n/*\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Traveldetails() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Accomidation code:  \n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n\n  return (\n    <>\n\n      <div className=\"travelout\">\n        <div className=\"row vits\">\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header \" ><h6>Places to Visit</h6></div>\n              <div className=\"card-body\">\n\n                {touristPlaces.map((place, index) => (\n\n\n                  <div key={index}>\n\n\n                    {place.name} \n\n                  </div>\n\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                {accommodations.map((accommodation, index) => (\n                  <div key={index}>\n                    {accommodation.name} - Rating: {accommodation.rating}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"18rem\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Dark card title</h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"18rem\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Dark card title</h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n}\nexport default Traveldetails;\n*/\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Traveldetails() {\n  const [userCity, setUserCity] = useState(\"hyderabad\");\n  const [touristPlaces, setTouristPlaces] = useState([]);\n  const [accommodations, setAccommodations] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cityCoords = await getCityCoordinates(userCity);\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000;\n\n        // Fetch places to visit\n        const placesUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const placesResponse = await axios.get(placesUrl);\n        const places = placesResponse.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0,\n        }));\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n        setTouristPlaces(sortedPlaces);\n\n        // Fetch accommodations\n        const accommodationsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n        const accommodationsResponse = await axios.get(accommodationsUrl);\n        const accommodations = accommodationsResponse.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n        }));\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n        setAccommodations(sortedAccommodations);\n\n        // Fetch restaurants\n        const restaurantsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=restaurants&apikey=${apiKey}`;\n        const restaurantsResponse = await axios.get(restaurantsUrl);\n        const restaurants = restaurantsResponse.data.features.map(restaurant => ({\n          name: restaurant.properties.name,\n          // Extract other relevant information as needed\n        }));\n        setRestaurants(restaurants);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    fetchData();\n  }, [userCity]);\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"travelout\">\n        <div className=\"row vits\">\n          {/* Places to Visit */}\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header\"><h6>Places to Visit</h6></div>\n              <div className=\"card-body\">\n                {touristPlaces.map((place, index) => (\n                  <div key={index}>\n                    {place.name} - Rating: {place.rating}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Accommodation Details */}\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header\">Accommodation Details</div>\n              <div className=\"card-body\">\n                {accommodations.map((accommodation, index) => (\n                  <div key={index}>\n                    {accommodation.name} - Rating: {accommodation.rating}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Restaurants */}\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header\"><h6>Restaurants</h6></div>\n              <div className=\"card-body\">\n                {restaurants.map((restaurant, index) => (\n                  <div key={index}>\n                    {restaurant.name}\n                    {/* Render other information about the restaurant if needed */}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Additional cards as needed */}\n          {/* ... */}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Traveldetails;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,qBAAqB;AAC5B,OAAO,sCAAsC;AAC7C,OAAO,2CAA2C;AAClD,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,WAAW,CAAC;EACrD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMgB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMC,kBAAkB,CAACV,QAAQ,CAAC;QACrD,MAAMW,MAAM,GAAG,0DAA0D,CAAC,CAAC;QAC3E,MAAMC,MAAM,GAAG,KAAK;;QAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}