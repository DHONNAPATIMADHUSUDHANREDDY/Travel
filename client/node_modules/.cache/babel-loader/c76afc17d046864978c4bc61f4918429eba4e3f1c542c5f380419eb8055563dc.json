{"ast":null,"code":"var _jsxFileName = \"/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directlyS\n  return (\n\n    <div className=\"\">\n       \n      \n\n      {touristPlaces.map((place, index) => (\n\n       \n        <div key={index}>\n          \n       \n          {place.name} - Rating: {place.rating}\n         \n        </div>\n\n      ))}\n     \n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n\n- ---- - - - - - ---- -- - -- - - - - -- - -  - - ----------------------------------------\n*/\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        setAccommodations(accommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n*/\n\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n       \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n*/\n\n/*\n\n// exact location of accomidation\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          location: {\n            lon: accommodation.geometry.coordinates[0],\n            lat: accommodation.geometry.coordinates[1],\n          },\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating} - Location: {accommodation.location.lat}, {accommodation.location.lon}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\n/*\n // Accomidation details\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Traveldetails() {\n  _s();\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0 // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async city => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"travelout\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row vits\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"25rem\",\n              overflow: \"scroll\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header \",\n              children: /*#__PURE__*/_jsxDEV(\"h6\", {\n                children: \"Places to Visit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 498,\n                columnNumber: 46\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: touristPlaces.map((place, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [place.name, \" \"]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"25rem\",\n              overflow: \"scroll\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: \"Header\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: accommodations.map((accommodation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [accommodation.name, \" - Rating: \", accommodation.rating]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"18rem\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: \"Header\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title\",\n                children: \"Dark card title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: \"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-6\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"18rem\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: \"Header\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                className: \"card-title\",\n                children: \"Dark card title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"card-text\",\n                children: \"Some quick example text to build on the card title and make up the bulk of the card's content.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Traveldetails, \"V6fjSfTD5k4S5+0taN+zaBGsRYA=\");\n_c = Traveldetails;\nexport default Traveldetails;\nvar _c;\n$RefreshReg$(_c, \"Traveldetails\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Traveldetails","_s","userCity","setUserCity","touristPlaces","setTouristPlaces","fetchTouristPlaces","cityCoords","getCityCoordinates","apiKey","radius","apiUrl","lon","lat","response","get","places","data","features","map","place","name","properties","rating","rate","sortedPlaces","sort","a","b","slice","error","console","city","citySearchUrl","cityData","status","Error","children","className","style","maxWidth","maxHeight","overflow","fileName","_jsxFileName","lineNumber","columnNumber","index","accommodations","accommodation","_c","$RefreshReg$"],"sources":["/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx"],"sourcesContent":["/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directlyS\n  return (\n\n    <div className=\"\">\n       \n      \n\n      {touristPlaces.map((place, index) => (\n\n       \n        <div key={index}>\n          \n       \n          {place.name} - Rating: {place.rating}\n         \n        </div>\n\n      ))}\n     \n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n\n- ---- - - - - - ---- -- - -- - - - - -- - -  - - ----------------------------------------\n*/\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        setAccommodations(accommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n*/\n\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n       \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n*/\n\n/*\n\n// exact location of accomidation\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          location: {\n            lon: accommodation.geometry.coordinates[0],\n            lat: accommodation.geometry.coordinates[1],\n          },\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating} - Location: {accommodation.location.lat}, {accommodation.location.lon}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\n\n/*\n // Accomidation details\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n*/\n\n\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Traveldetails() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n\n  return (\n    <>\n\n      <div className=\"travelout\">\n        <div className=\"row vits\">\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header \" ><h6>Places to Visit</h6></div>\n              <div className=\"card-body\">\n\n                {touristPlaces.map((place, index) => (\n\n\n                  <div key={index}>\n\n\n                    {place.name} {/*- Rating: {place.rating} */}\n\n                  </div>\n\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"25rem\", overflow: \"scroll\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                {accommodations.map((accommodation, index) => (\n                  <div key={index}>\n                    {accommodation.name} - Rating: {accommodation.rating}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"18rem\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Dark card title</h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-lg-6 col-md-6 col-sm-6\">\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"18rem\" }}>\n              <div className=\"card-header\">Header</div>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Dark card title</h5>\n                <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n}\nexport default Traveldetails;"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}