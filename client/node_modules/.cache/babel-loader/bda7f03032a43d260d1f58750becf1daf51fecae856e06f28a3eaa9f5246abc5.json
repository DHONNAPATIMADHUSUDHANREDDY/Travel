{"ast":null,"code":"var _jsxFileName = \"/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Traveldetails.jsx\",\n  _s = $RefreshSig$();\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Traveldetails() {\n  _s();\n  const [userCity, setUserCity] = useState(\"\");\n  const [weatherData, setWeatherData] = useState({\n    temperature: 0,\n    weatherConditions: \"\",\n    climateDescription: \"\",\n    seasonalWeather: \"\"\n  });\n  useEffect(() => {\n    const fetchPlaceName = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:4000/getplace\");\n        setUserCity(response.data.place_name);\n      } catch (error) {\n        console.error(\"Error fetching place name:\", error);\n      }\n    };\n    fetchPlaceName();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cityCoords = await getCityCoordinates(userCity);\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000;\n\n        // Fetch weather data\n        const weatherUrl = `https://api.opentripmap.com/0.1/en/places/temperate?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const weatherResponse = await axios.get(weatherUrl);\n        const weatherDetails = weatherResponse.data;\n        setWeatherData({\n          temperature: weatherDetails.temp,\n          weatherConditions: weatherDetails.weather_conditions,\n          climateDescription: weatherDetails.climate_description,\n          seasonalWeather: weatherDetails.seasonal_weather\n        });\n\n        // Fetch other data (places to visit, accommodations, restaurants) as before...\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n    fetchData();\n  }, [userCity]);\n  const getCityCoordinates = async city => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"travelout\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row vits\",\n        style: {\n          marginTop: \"10%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header card text-white bg-dark mb-1\",\n            style: {\n              maxWidth: \"20rem\",\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"Places to Visit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 120\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"15rem\",\n              overflow: \"scroll\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: touristPlaces.map((place, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: place.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header card text-white bg-dark mb-1\",\n            style: {\n              maxWidth: \"20rem\",\n              textAlign: \"center\"\n            },\n            children: \"Accommodation Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"15rem\",\n              overflow: \"scroll\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: accommodations.map((accommodation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: accommodation.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header card text-white bg-dark mb-1\",\n            style: {\n              maxWidth: \"20rem\",\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"Restaurants\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 120\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"15rem\",\n              overflow: \"scroll\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: restaurants.map((restaurant, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: restaurant.name\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-6 col-md-6 col-sm-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header card text-white bg-dark mb-1\",\n            style: {\n              maxWidth: \"20rem\",\n              textAlign: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: \"Weather Information\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 120\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card text-white bg-dark mb-3\",\n            style: {\n              maxWidth: \"20rem\",\n              maxHeight: \"15rem\",\n              overflow: \"scroll\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-body\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Current Temperature: \", weatherData.temperature, \"\\xB0C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Weather Conditions: \", weatherData.weatherConditions]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Climate Description: \", weatherData.climateDescription]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Seasonal Weather: \", weatherData.seasonalWeather]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Traveldetails, \"URGdQ1dP+t3jOGa1/+JV/TUE224=\");\n_c = Traveldetails;\nexport default Traveldetails;\n\n/*\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Traveldetails() {\n\n\n  //const [userCity, setUserCity] = useState(\"hyderabad\");\n\n  const [userCity, setUserCity] = useState(\"\");\n\n  useEffect(() => {\n    const fetchPlaceName = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:4000/getplace\");\n        setUserCity(response.data.place_name);\n      } catch (error) {\n        console.error(\"Error fetching place name:\", error);\n      }\n    };\n\n    fetchPlaceName();\n  }, []);\n\n\n\n\n  const [touristPlaces, setTouristPlaces] = useState([]);\n  const [accommodations, setAccommodations] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cityCoords = await getCityCoordinates(userCity);\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000;\n\n        // Fetch places to visit\n        const placesUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const placesResponse = await axios.get(placesUrl);\n        const places = placesResponse.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0,\n        }));\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n        setTouristPlaces(sortedPlaces);\n\n        // Fetch accommodations\n        const accommodationsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n        const accommodationsResponse = await axios.get(accommodationsUrl);\n        const accommodations = accommodationsResponse.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n        }));\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n        setAccommodations(sortedAccommodations);\n\n        // Fetch restaurants\n        const restaurantsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=restaurants&apikey=${apiKey}`;\n        const restaurantsResponse = await axios.get(restaurantsUrl);\n        const restaurants = restaurantsResponse.data.features.map(restaurant => ({\n          name: restaurant.properties.name,\n          rating: restaurant.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n        const sortedRestaurants = restaurants.sort((a, b) => b.rating - a.rating).slice(0, 30);\n        setRestaurants(sortedRestaurants);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    fetchData();\n  }, [userCity]);\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"travelout\">\n        <div className=\"row vits\"style={{marginTop:\"10%\"}}>\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\",textAlign:\"center\" }}><h6 >Places to Visit</h6></div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {touristPlaces.map((place, index) => (\n                  <div key={index}>\n                    {place.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\" ,textAlign:\"center\"}}>Accommodation Details</div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {accommodations.map((accommodation, index) => (\n                  <div key={index}>\n                    {accommodation.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\" ,textAlign:\"center\"}}><h6>Restaurants</h6></div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {restaurants.map((restaurant, index) => (\n                  <div key={index}>\n                    {restaurant.name}\n\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Traveldetails;\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Traveldetails\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Traveldetails","_s","userCity","setUserCity","weatherData","setWeatherData","temperature","weatherConditions","climateDescription","seasonalWeather","fetchPlaceName","response","get","data","place_name","error","console","fetchData","cityCoords","getCityCoordinates","apiKey","radius","weatherUrl","lon","lat","weatherResponse","weatherDetails","temp","weather_conditions","climate_description","seasonal_weather","city","citySearchUrl","cityData","status","Error","children","className","style","marginTop","maxWidth","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","maxHeight","overflow","touristPlaces","map","place","index","name","accommodations","accommodation","restaurants","restaurant","_c","$RefreshReg$"],"sources":["/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Traveldetails.jsx"],"sourcesContent":["import \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Traveldetails() {\n  const [userCity, setUserCity] = useState(\"\");\n  const [weatherData, setWeatherData] = useState({\n    temperature: 0,\n    weatherConditions: \"\",\n    climateDescription: \"\",\n    seasonalWeather: \"\",\n  });\n\n  useEffect(() => {\n    const fetchPlaceName = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:4000/getplace\");\n        setUserCity(response.data.place_name);\n      } catch (error) {\n        console.error(\"Error fetching place name:\", error);\n      }\n    };\n\n    fetchPlaceName();\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cityCoords = await getCityCoordinates(userCity);\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000;\n\n        // Fetch weather data\n        const weatherUrl = `https://api.opentripmap.com/0.1/en/places/temperate?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const weatherResponse = await axios.get(weatherUrl);\n        const weatherDetails = weatherResponse.data;\n        \n        setWeatherData({\n          temperature: weatherDetails.temp,\n          weatherConditions: weatherDetails.weather_conditions,\n          climateDescription: weatherDetails.climate_description,\n          seasonalWeather: weatherDetails.seasonal_weather,\n        });\n\n        // Fetch other data (places to visit, accommodations, restaurants) as before...\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    fetchData();\n  }, [userCity]);\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"travelout\">\n        <div className=\"row vits\"style={{marginTop:\"10%\"}}>\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\",textAlign:\"center\" }}><h6 >Places to Visit</h6></div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {/* Display places to visit */}\n                {touristPlaces.map((place, index) => (\n                  <div key={index}>\n                    {place.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\" ,textAlign:\"center\"}}>Accommodation Details</div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {/* Display accommodation details */}\n                {accommodations.map((accommodation, index) => (\n                  <div key={index}>\n                    {accommodation.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\" ,textAlign:\"center\"}}><h6>Restaurants</h6></div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {/* Display restaurant details */}\n                {restaurants.map((restaurant, index) => (\n                  <div key={index}>\n                    {restaurant.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Temperature card */}\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\",textAlign:\"center\" }}><h6 >Weather Information</h6></div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                <p>Current Temperature: {weatherData.temperature}°C</p>\n                <p>Weather Conditions: {weatherData.weatherConditions}</p>\n                <p>Climate Description: {weatherData.climateDescription}</p>\n                <p>Seasonal Weather: {weatherData.seasonalWeather}</p>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Traveldetails;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\nimport \"./Traveldetails.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Traveldetails() {\n\n\n  //const [userCity, setUserCity] = useState(\"hyderabad\");\n\n  const [userCity, setUserCity] = useState(\"\");\n\n  useEffect(() => {\n    const fetchPlaceName = async () => {\n      try {\n        const response = await axios.get(\"http://localhost:4000/getplace\");\n        setUserCity(response.data.place_name);\n      } catch (error) {\n        console.error(\"Error fetching place name:\", error);\n      }\n    };\n\n    fetchPlaceName();\n  }, []);\n\n\n\n\n  const [touristPlaces, setTouristPlaces] = useState([]);\n  const [accommodations, setAccommodations] = useState([]);\n  const [restaurants, setRestaurants] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cityCoords = await getCityCoordinates(userCity);\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000;\n\n        // Fetch places to visit\n        const placesUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const placesResponse = await axios.get(placesUrl);\n        const places = placesResponse.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0,\n        }));\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n        setTouristPlaces(sortedPlaces);\n\n        // Fetch accommodations\n        const accommodationsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n        const accommodationsResponse = await axios.get(accommodationsUrl);\n        const accommodations = accommodationsResponse.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n        }));\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 30);\n        setAccommodations(sortedAccommodations);\n\n        // Fetch restaurants\n        const restaurantsUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=restaurants&apikey=${apiKey}`;\n        const restaurantsResponse = await axios.get(restaurantsUrl);\n        const restaurants = restaurantsResponse.data.features.map(restaurant => ({\n          name: restaurant.properties.name,\n          rating: restaurant.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n        const sortedRestaurants = restaurants.sort((a, b) => b.rating - a.rating).slice(0, 30);\n        setRestaurants(sortedRestaurants);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    fetchData();\n  }, [userCity]);\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"travelout\">\n        <div className=\"row vits\"style={{marginTop:\"10%\"}}>\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\",textAlign:\"center\" }}><h6 >Places to Visit</h6></div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {touristPlaces.map((place, index) => (\n                  <div key={index}>\n                    {place.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\" ,textAlign:\"center\"}}>Accommodation Details</div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {accommodations.map((accommodation, index) => (\n                  <div key={index}>\n                    {accommodation.name}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"col-lg-6 col-md-6 col-sm-12\">\n            <div className=\"card-header card text-white bg-dark mb-1\" style={{ maxWidth: \"20rem\" ,textAlign:\"center\"}}><h6>Restaurants</h6></div>\n            <div className=\"card text-white bg-dark mb-3\" style={{ maxWidth: \"20rem\", maxHeight: \"15rem\", overflow: \"scroll\" }}>\n\n              <div className=\"card-body\">\n                {restaurants.map((restaurant, index) => (\n                  <div key={index}>\n                    {restaurant.name}\n\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Traveldetails;\n\n*/"],"mappings":";;AAAA,OAAO,qBAAqB;AAC5B,OAAO,sCAAsC;AAC7C,OAAO,2CAA2C;AAClD,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC;IAC7Ca,WAAW,EAAE,CAAC;IACdC,iBAAiB,EAAE,EAAE;IACrBC,kBAAkB,EAAE,EAAE;IACtBC,eAAe,EAAE;EACnB,CAAC,CAAC;EAEFf,SAAS,CAAC,MAAM;IACd,MAAMgB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,gCAAgC,CAAC;QAClET,WAAW,CAACQ,QAAQ,CAACE,IAAI,CAACC,UAAU,CAAC;MACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDL,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAENhB,SAAS,CAAC,MAAM;IACd,MAAMuB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAMC,kBAAkB,CAACjB,QAAQ,CAAC;QACrD,MAAMkB,MAAM,GAAG,0DAA0D;QACzE,MAAMC,MAAM,GAAG,KAAK;;QAEpB;QACA,MAAMC,UAAU,GAAI,8DAA6DD,MAAO,QAAOH,UAAU,CAACK,GAAI,QAAOL,UAAU,CAACM,GAAI,WAAUJ,MAAO,EAAC;QACtJ,MAAMK,eAAe,GAAG,MAAM9B,KAAK,CAACiB,GAAG,CAACU,UAAU,CAAC;QACnD,MAAMI,cAAc,GAAGD,eAAe,CAACZ,IAAI;QAE3CR,cAAc,CAAC;UACbC,WAAW,EAAEoB,cAAc,CAACC,IAAI;UAChCpB,iBAAiB,EAAEmB,cAAc,CAACE,kBAAkB;UACpDpB,kBAAkB,EAAEkB,cAAc,CAACG,mBAAmB;UACtDpB,eAAe,EAAEiB,cAAc,CAACI;QAClC,CAAC,CAAC;;QAEF;MACF,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACnE;IACF,CAAC;IAEDE,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACf,QAAQ,CAAC,CAAC;EAEd,MAAMiB,kBAAkB,GAAG,MAAOY,IAAI,IAAK;IACzC,IAAI;MACF,MAAMX,MAAM,GAAG,0DAA0D;MACzE,MAAMY,aAAa,GAAI,0DAAyDD,IAAK,WAAUX,MAAO,EAAC;MACvG,MAAMT,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAACoB,aAAa,CAAC;MAC/C,MAAMC,QAAQ,GAAGtB,QAAQ,CAACE,IAAI;MAE9B,IAAIoB,QAAQ,CAACC,MAAM,KAAK,IAAI,EAAE;QAC5B,OAAO;UACLX,GAAG,EAAEU,QAAQ,CAACV,GAAG;UACjBC,GAAG,EAAES,QAAQ,CAACT;QAChB,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIW,KAAK,CAAE,kCAAiCJ,IAAK,EAAC,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;EAED,oBACElB,OAAA,CAAAE,SAAA;IAAAqC,QAAA,eACEvC,OAAA;MAAKwC,SAAS,EAAC,WAAW;MAAAD,QAAA,eACxBvC,OAAA;QAAKwC,SAAS,EAAC,UAAU;QAAAC,KAAK,EAAE;UAACC,SAAS,EAAC;QAAK,CAAE;QAAAH,QAAA,gBAEhDvC,OAAA;UAAKwC,SAAS,EAAC,6BAA6B;UAAAD,QAAA,gBAC1CvC,OAAA;YAAKwC,SAAS,EAAC,0CAA0C;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAACC,SAAS,EAAC;YAAS,CAAE;YAAAL,QAAA,eAACvC,OAAA;cAAAuC,QAAA,EAAK;YAAe;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC1IhD,OAAA;YAAKwC,SAAS,EAAC,8BAA8B;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAAEM,SAAS,EAAE,OAAO;cAAEC,QAAQ,EAAE;YAAS,CAAE;YAAAX,QAAA,eAEjHvC,OAAA;cAAKwC,SAAS,EAAC,WAAW;cAAAD,QAAA,EAEvBY,aAAa,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC9BtD,OAAA;gBAAAuC,QAAA,EACGc,KAAK,CAACE;cAAI,GADHD,KAAK;gBAAAT,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACN;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENhD,OAAA;UAAKwC,SAAS,EAAC,6BAA6B;UAAAD,QAAA,gBAC1CvC,OAAA;YAAKwC,SAAS,EAAC,0CAA0C;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAAEC,SAAS,EAAC;YAAQ,CAAE;YAAAL,QAAA,EAAC;UAAqB;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACtIhD,OAAA;YAAKwC,SAAS,EAAC,8BAA8B;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAAEM,SAAS,EAAE,OAAO;cAAEC,QAAQ,EAAE;YAAS,CAAE;YAAAX,QAAA,eAEjHvC,OAAA;cAAKwC,SAAS,EAAC,WAAW;cAAAD,QAAA,EAEvBiB,cAAc,CAACJ,GAAG,CAAC,CAACK,aAAa,EAAEH,KAAK,kBACvCtD,OAAA;gBAAAuC,QAAA,EACGkB,aAAa,CAACF;cAAI,GADXD,KAAK;gBAAAT,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACN;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAENhD,OAAA;UAAKwC,SAAS,EAAC,6BAA6B;UAAAD,QAAA,gBAC1CvC,OAAA;YAAKwC,SAAS,EAAC,0CAA0C;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAAEC,SAAS,EAAC;YAAQ,CAAE;YAAAL,QAAA,eAACvC,OAAA;cAAAuC,QAAA,EAAI;YAAW;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACrIhD,OAAA;YAAKwC,SAAS,EAAC,8BAA8B;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAAEM,SAAS,EAAE,OAAO;cAAEC,QAAQ,EAAE;YAAS,CAAE;YAAAX,QAAA,eAEjHvC,OAAA;cAAKwC,SAAS,EAAC,WAAW;cAAAD,QAAA,EAEvBmB,WAAW,CAACN,GAAG,CAAC,CAACO,UAAU,EAAEL,KAAK,kBACjCtD,OAAA;gBAAAuC,QAAA,EACGoB,UAAU,CAACJ;cAAI,GADRD,KAAK;gBAAAT,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACN;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAGNhD,OAAA;UAAKwC,SAAS,EAAC,6BAA6B;UAAAD,QAAA,gBAC1CvC,OAAA;YAAKwC,SAAS,EAAC,0CAA0C;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAACC,SAAS,EAAC;YAAS,CAAE;YAAAL,QAAA,eAACvC,OAAA;cAAAuC,QAAA,EAAK;YAAmB;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC9IhD,OAAA;YAAKwC,SAAS,EAAC,8BAA8B;YAACC,KAAK,EAAE;cAAEE,QAAQ,EAAE,OAAO;cAAEM,SAAS,EAAE,OAAO;cAAEC,QAAQ,EAAE;YAAS,CAAE;YAAAX,QAAA,eAEjHvC,OAAA;cAAKwC,SAAS,EAAC,WAAW;cAAAD,QAAA,gBACxBvC,OAAA;gBAAAuC,QAAA,GAAG,uBAAqB,EAAChC,WAAW,CAACE,WAAW,EAAC,OAAE;cAAA;gBAAAoC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACvDhD,OAAA;gBAAAuC,QAAA,GAAG,sBAAoB,EAAChC,WAAW,CAACG,iBAAiB;cAAA;gBAAAmC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC1DhD,OAAA;gBAAAuC,QAAA,GAAG,uBAAqB,EAAChC,WAAW,CAACI,kBAAkB;cAAA;gBAAAkC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC5DhD,OAAA;gBAAAuC,QAAA,GAAG,oBAAkB,EAAChC,WAAW,CAACK,eAAe;cAAA;gBAAAiC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnD;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBACN,CAAC;AAEP;AAAC5C,EAAA,CA3IQD,aAAa;AAAAyD,EAAA,GAAbzD,aAAa;AA6ItB,eAAeA,aAAa;;AAqB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7JA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}