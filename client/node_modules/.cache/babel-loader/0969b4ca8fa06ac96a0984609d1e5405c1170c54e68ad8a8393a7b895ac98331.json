{"ast":null,"code":"var _jsxFileName = \"/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport place from \"./images/place.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Rough2() {\n  _s();\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0 // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async city => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directly\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"svrc\",\n    children: touristPlaces.map((place, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [place.name, \" - Rating: \", place.rating]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(Rough2, \"V6fjSfTD5k4S5+0taN+zaBGsRYA=\");\n_c = Rough2;\nexport default Rough2;\nvar _c;\n$RefreshReg$(_c, \"Rough2\");","map":{"version":3,"names":["React","useState","useEffect","axios","place","jsxDEV","_jsxDEV","Rough2","_s","userCity","setUserCity","touristPlaces","setTouristPlaces","fetchTouristPlaces","cityCoords","getCityCoordinates","apiKey","radius","apiUrl","lon","lat","response","get","places","data","features","map","name","properties","rating","rate","sortedPlaces","sort","a","b","slice","error","console","city","citySearchUrl","cityData","status","Error","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport place from \"./images/place.jpg\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n       \n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directly\n  return (\n    <div className=\"svrc\">\n      \n      {touristPlaces.map((place, index) => (\n        <div key={index}>\n          \n          {place.name} - Rating: {place.rating}\n          {/* Render other information about the place */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}