{"ast":null,"code":"var _jsxFileName = \"/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"\");\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 5000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=tourist_objects&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          // Extract other relevant information as needed\n        }));\n\n        setTouristPlaces(places);\n        console.log(touristPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    if (userCity) {\n      fetchTouristPlaces();\n    }\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    const apiKey = 'YOUR_OPEN_TRIP_MAP_API_KEY';\n    const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n    const response = await axios.get(citySearchUrl);\n    const cityData = response.data;\n\n    if (cityData.status === \"OK\") {\n      return {\n        lon: cityData.lon,\n        lat: cityData.lat,\n      };\n    } else {\n      throw new Error(`Could not find coordinates for ${city}`);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter city name\"\n          value={userCity}\n          onChange={(e) => setUserCity(e.target.value)}\n        />\n      </div>\n\n      <div className=\"svrc\">\n       \n        {touristPlaces.map((place, index) => (\n          <div key={index}>\n            {place.name}\n           \n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Rough2;\n*/\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Rough2() {\n  _s();\n  const [userCity, setUserCity] = useState(\"\");\n  const [touristPlaces, setTouristPlaces] = useState([]);\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the city coordinates\n        const apiKey = 'YOUR_OPEN_TRIP_MAP_API_KEY';\n        const radius = 5000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=tourist_objects&apikey=${apiKey}`;\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name\n          // Extract other relevant information as needed\n        }));\n        setTouristPlaces(places);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n    if (userCity) {\n      fetchTouristPlaces();\n    }\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async city => {\n    try {\n      const apiKey = 'YOUR_OPEN_TRIP_MAP_API_KEY';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city name\",\n        value: userCity,\n        onChange: e => setUserCity(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svrc\",\n      children: touristPlaces.map((place, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: place.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Rough2, \"wvdTC4ex3mZZrxXUOXQQf+EPI4Y=\");\n_c = Rough2;\nexport default Rough2;\nvar _c;\n$RefreshReg$(_c, \"Rough2\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Rough2","_s","userCity","setUserCity","touristPlaces","setTouristPlaces","fetchTouristPlaces","cityCoords","getCityCoordinates","apiKey","radius","apiUrl","lon","lat","response","get","places","data","features","map","place","name","properties","error","console","city","citySearchUrl","cityData","status","Error","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","className","index","_c","$RefreshReg$"],"sources":["/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx"],"sourcesContent":["/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"\");\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 5000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=tourist_objects&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          // Extract other relevant information as needed\n        }));\n\n        setTouristPlaces(places);\n        console.log(touristPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    if (userCity) {\n      fetchTouristPlaces();\n    }\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    const apiKey = 'YOUR_OPEN_TRIP_MAP_API_KEY';\n    const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n    const response = await axios.get(citySearchUrl);\n    const cityData = response.data;\n\n    if (cityData.status === \"OK\") {\n      return {\n        lon: cityData.lon,\n        lat: cityData.lat,\n      };\n    } else {\n      throw new Error(`Could not find coordinates for ${city}`);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter city name\"\n          value={userCity}\n          onChange={(e) => setUserCity(e.target.value)}\n        />\n      </div>\n\n      <div className=\"svrc\">\n       \n        {touristPlaces.map((place, index) => (\n          <div key={index}>\n            {place.name}\n           \n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Rough2;\n*/\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"\");\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the city coordinates\n        const apiKey = 'YOUR_OPEN_TRIP_MAP_API_KEY';\n        const radius = 5000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=tourist_objects&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          // Extract other relevant information as needed\n        }));\n\n        setTouristPlaces(places);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    if (userCity) {\n      fetchTouristPlaces();\n    }\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = 'YOUR_OPEN_TRIP_MAP_API_KEY';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter city name\"\n          value={userCity}\n          onChange={(e) => setUserCity(e.target.value)}\n        />\n      </div>\n\n      <div className=\"svrc\">\n        {/* Your component JSX */}\n        {touristPlaces.map((place, index) => (\n          <div key={index}>\n            {place.name}\n            {/* Render other information about the place */}\n          </div>\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Rough2;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}