{"ast":null,"code":"var _jsxFileName = \"/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx\",\n  _s = $RefreshSig$();\n/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directlyS\n  return (\n\n    <div className=\"\">\n       \n      \n\n      {touristPlaces.map((place, index) => (\n\n       \n        <div key={index}>\n          \n       \n          {place.name} - Rating: {place.rating}\n         \n        </div>\n\n      ))}\n     \n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n\n- ---- - - - - - ---- -- - -- - - - - -- - -  - - ----------------------------------------\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        setAccommodations(accommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n*/\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Rough2() {\n  _s();\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          location: {\n            lon: accommodation.geometry.coordinates[0],\n            lat: accommodation.geometry.coordinates[1]\n          }\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async city => {\n    try {\n      const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: accommodations.map((accommodation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [accommodation.name, \" - Rating: \", accommodation.rating, \" - Location: \", accommodation.location.lat, \", \", accommodation.location.lon]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n}\n_s(Rough2, \"bJUO5Pk1MJtf1LCDcM+3mjtMC2I=\");\n_c = Rough2;\nexport default Rough2;\nvar _c;\n$RefreshReg$(_c, \"Rough2\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Rough2","_s","userCity","setUserCity","accommodations","setAccommodations","fetchAccommodations","cityCoords","getCityCoordinates","apiKey","radius","accommodationUrl","lon","lat","response","get","data","features","map","accommodation","name","properties","rating","rate","location","geometry","coordinates","sortedAccommodations","sort","a","b","slice","error","console","city","citySearchUrl","cityData","status","Error","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/madhusudhanreddydhonnapati/Documents/helpdesk/client/src/Rough2.jsx"],"sourcesContent":["/*\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [touristPlaces, setTouristPlaces] = useState([]);\n\n  useEffect(() => {\n    const fetchTouristPlaces = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch tourist places around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n        const radius = 10000; // Adjust the radius as needed\n\n        const apiUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&apikey=${apiKey}`;\n\n        const response = await axios.get(apiUrl);\n\n        // Handle the response data and extract tourist places information\n        const places = response.data.features.map(place => ({\n          name: place.properties.name,\n          rating: place.properties.rate || 0, // Use 0 as default rating if not available\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the places by rating in descending order and get the top 20\n        const sortedPlaces = places.sort((a, b) => b.rating - a.rating).slice(0, 20);\n\n        setTouristPlaces(sortedPlaces);\n      } catch (error) {\n        console.error('Error fetching data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch tourist places when the component mounts or userCity changes\n    fetchTouristPlaces();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3';\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the tourist places directlyS\n  return (\n\n    <div className=\"\">\n       \n      \n\n      {touristPlaces.map((place, index) => (\n\n       \n        <div key={index}>\n          \n       \n          {place.name} - Rating: {place.rating}\n         \n        </div>\n\n      ))}\n     \n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n\n- ---- - - - - - ---- -- - -- - - - - -- - -  - - ----------------------------------------\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          // Extract other relevant information as needed\n        }));\n\n        setAccommodations(accommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = '5ae2e3f221c38a28845f05b6d63373a3a7200d5edd9e4bd581e3b7c3'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating}\n         \n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n\n\n*/\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction Rough2() {\n  const [userCity, setUserCity] = useState(\"hyderabad\"); // Set default city to Hyderabad\n  const [accommodations, setAccommodations] = useState([]);\n\n  useEffect(() => {\n    const fetchAccommodations = async () => {\n      try {\n        // Fetch coordinates for the user-entered city\n        const cityCoords = await getCityCoordinates(userCity);\n\n        // Fetch accommodations around the user-entered city coordinates\n        const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n        const radius = 10000; // Adjust the radius as needed\n\n        const accommodationUrl = `https://api.opentripmap.com/0.1/en/places/radius?radius=${radius}&lon=${cityCoords.lon}&lat=${cityCoords.lat}&kinds=accomodations&apikey=${apiKey}`;\n\n        const response = await axios.get(accommodationUrl);\n\n        // Handle the response data and extract accommodation information\n        const accommodations = response.data.features.map(accommodation => ({\n          name: accommodation.properties.name,\n          rating: accommodation.properties.rate || 0,\n          location: {\n            lon: accommodation.geometry.coordinates[0],\n            lat: accommodation.geometry.coordinates[1],\n          },\n          // Extract other relevant information as needed\n        }));\n\n        // Sort the accommodations by rating in descending order and get the top 50\n        const sortedAccommodations = accommodations.sort((a, b) => b.rating - a.rating).slice(0, 50);\n\n        setAccommodations(sortedAccommodations);\n      } catch (error) {\n        console.error('Error fetching accommodation data from OpenTripMap API:', error);\n      }\n    };\n\n    // Fetch accommodations when the component mounts or userCity changes\n    fetchAccommodations();\n  }, [userCity]); // Run the effect when userCity changes\n\n  const getCityCoordinates = async (city) => {\n    try {\n      const apiKey = 'YOUR_API_KEY'; // Replace with your actual API key\n      const citySearchUrl = `https://api.opentripmap.com/0.1/en/places/geoname?name=${city}&apikey=${apiKey}`;\n\n      const response = await axios.get(citySearchUrl);\n      const cityData = response.data;\n\n      if (cityData.status === \"OK\") {\n        return {\n          lon: cityData.lon,\n          lat: cityData.lat,\n        };\n      } else {\n        throw new Error(`Could not find coordinates for ${city}`);\n      }\n    } catch (error) {\n      console.error('Error fetching city coordinates:', error);\n      throw error;\n    }\n  };\n\n  // Render the accommodation details\n  return (\n    <div className=\"\">\n      {accommodations.map((accommodation, index) => (\n        <div key={index}>\n          {accommodation.name} - Rating: {accommodation.rating} - Location: {accommodation.location.lat}, {accommodation.location.lon}\n          {/* Render other information about the accommodation */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Rough2;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;EACvD,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,MAAMU,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}